name: Build Docker Images

on:
  push:
    branches:
      - ci

env:
  WEB_IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web:latest
  NGINX_IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx:latest

jobs:

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1

      - name: Debug Script
        uses: hmarr/debug-action@v1.0.0

      - name: Add Environment Variables to .env file
        run: |
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo DJANGO_PROJECT_NAME=${{ secrets.DJANGO_PROJECT_NAME }} >> .env
          echo DJANGO_ADMIN_LOGIN_PATH=${{ secrets.DJANGO_ADMIN_LOGIN_PATH }} >> .env
          echo COMPOSE_PROJECT_NAME=${{ secrets.COMPOSE_PROJECT_NAME }} >> .env
          echo COMPOSE_HTTP_TIMEOUT=120 >> .env
          echo DATABASE=${{ secrets.DATABASE }} >> .env

      - name: Add Environment Variables to dev.env file
        run: |
          echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> dev.env

      - name: Add Environment Variables to prod.env file
        run: |
          echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> prod.env
          echo DIGITAL_OCEAN_IP_ADDRESS=${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} >> prod.env
          echo DB_NAME=${{ secrets.DB_NAME }} >> prod.env
          echo DB_USER=${{ secrets.DB_USER }} >> prod.env
          echo DB_PASS=${{ secrets.DB_PASS }} >> prod.env
          echo DB_HOST=${{ secrets.DB_HOST }} >> prod.env
          echo DB_PORT=${{ secrets.DB_PORT }} >> prod.env
          echo DATABASE=${{ secrets.DATABASE }} >> prod.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> prod.env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> prod.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> prod.env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> prod.env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> prod.env

      - name: Set environment variables
        run: |
          echo ::set-env name=WEB_IMAGE::${{ env.WEB_IMAGE }}
          echo ::set-env name=NGINX_IMAGE::${{ env.NGINX_IMAGE }}

      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true

      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}

      - name: Docker Compose Up
        env:
          COMPOSE_INTERACTIVE_NO_CLI: 1
        run: docker-compose up -d

      - name: Check Running Containers
        run: docker-compose ps -a

      - name: Check Logs
        run: docker-compose logs web

      - name: Run Tests and Generate Coverage Report
        env:
          COMPOSE_INTERACTIVE_NO_CLI: 1
        run: docker-compose exec web pytest --cov=./ --cov-report=xml

      - name: Upload Coverage Report to Codecov.io
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
